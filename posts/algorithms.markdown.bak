---
layout: post
title: "Algorithms"
date: 2017-05-20 18:56:16 +0800
comments: true
categories: [algorithms]
draft: true
---


# search

### Depth First Search (DFS) on a Binary tree

與 BFS 一樣是用來看這個點有沒有辦法到另一個點或是否某個點有存在在 graph 裡 (如果所有點都有連接)

* root node `>` 左節點; root node `<` 右節點
* 原理是先往左再往右找, 從深找到淺
* 深到沒有子 node 再"回頭"換右邊
* 如果最後回到 root node (最上層) 就代表要找的 node 沒有存在


### binary search

* 必須是已經排序過的陣列
* 每一次取中間位置的值, 比對大小再向左向右找
* 最佳時間複雜度：O(1)
* 平均時間複雜度：O(log n)
* 最差時間複雜度：O(log n)
* 空間複雜度：O(1)






# sorting

### Insertion sorting

兩兩比較及交換, 並且比前面小要移到最前面

     *        # start from index=1
    524613
      *
    254613    # 2,5
       *
    245613    # 4,5
        *
    245613
         *
    124563    # 1,6  1,5  1,4  1,2   將 1 換到最前面

    124563    # 3,6  3,5  3,4

* Each step is O(n) swaps/compares
* Total: O(n2)
* compares are more expensive than swaps

比較改用 binary search on A[0:i-1] in O(log i) time. O(nlog n) compares

### Merge sort

步驟

1. size n
2. 分成 2 array of size n/2
3. sorted array of size n/2
4. 合回來 sorted array of size n

合併兩個已 sorted array, 先比較兩邊最小的, 再依大小填入 array.

Complexity T(n) = C1 (divie) + 2T(n/2) (recursive part) + C*N (merge part)




# Horner's Method

polynomial

    4x^3 + 5x^2 + 7x + 9

can be written in the "nested multiplication" form:

    ((4x+5) * x + 7) * x + 9






#### ref

* [Big O Notation](https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity)
* [初學者學演算法｜從時間複雜度認識常見演算法（一）](https://goo.gl/mKYH19)

